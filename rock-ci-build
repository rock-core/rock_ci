#! /bin/bash
#
# Main build script in all build server jobs
#
# All arguments are passed to the autoproj_bootstrap script
#
# Control environment variables. All of these except CONFIG_DIR and CONFIG_NAME
# can be set by creating a $CONFIG_NAME.config shell file in $CONFIG_DIR (see
# the description of these two variables for more information)
#
#   SKIP_SUCCESSFUL: if set to true, any build show last result was successful
#                    is ignored. The default is false.
#   MODE:
#       full-bootstrap: remove the complete dev/ directory and bootstrap fresh
#       bootstrap: keep the currently checked out code in dev/. Just delete all
#                  build byproducts, gems and autoproj configuration
#       incremental: builds from the current state of dev/. If the build has
#                    been cleaned last time, the job is ignored
#       auto: do a bootstrap if dev/ is clean and otherwise do an incremental
#             build
#
#   DOCGEN: if set to true, the API documentation is generated
#
#   CONFIG_DIR: directory where configuration files are stored. For each given
#     config name (see CONFIG_NAME below), a $CONFIG_NAME.config file is sourced
#     at the beginning of this shell script if it exists, and a $CONFIG_NAME.yml
#     file is used as the autoproj configuration file. It defaults to the
#     directory containing this script.
#   CONFIG_NAME: the name of the files to look for when loading configuration.
#     If the configuration files cannot be found, the corresponding default
#     config is searched as well. The default config name is obtained by
#     replacing the part before the first dash by "default". For instance
#     rock-master becomes default-master
#   RUBY: full path to the ruby executable to use
#   GEM: full path to the gem executable to use
#   BOOTSTRAP_URL: path to the autoproj bootstrap script to run (defaults to
#     rock-robotics.org/autoproj_bootstrap)
#   AUTOPROJ_OSDEPS_MODE: the mode in which to run the autoproj subsystem
#     (defaults to 'all')
#   PARALLEL: set parallel build level to the value of the variable
#   KEEP_GOING: if set execute autoproj with -k option

echo "$0 started at `date` on `lsb_release -a`"
set -ex

ROCK_CI_DIR=$(dirname "$0")
. "$ROCK_CI_DIR/rock-ci-shelllib"

rock_ci_setdefaults

if test "x$SKIP_SUCCESSFUL" = "xtrue" && test -d dev; then
    if test -f dev/successful; then
        if test "x$DOCGEN" != "xtrue" || test -f dev/doc-successful; then
            echo "last build was successful and SKIP_SUCCESSFUL is set, doing nothing"
            exit 0
        else
            MODE=incremental
        fi
    fi
fi

if test -z "$MODE"; then
    MODE=auto
fi

if test "x$MODE" = "xincremental"; then
    echo "MODE=incremental, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
elif test "x$MODE" = "xfull-bootstrap"; then
    echo "MODE=full-bootstrap, doing a full build, including checking out packages"
    do_incremental=0
    do_full_cleanup=1
elif test "x$MODE" = "xbootstrap"; then
    echo "MODE=bootstrap, doing a full build but not checking out packages again. Use full-bootstrap for that"
    do_incremental=0
    do_full_cleanup=0
elif test -d dev && ! test -f dev/successful; then
    echo "last build was unsuccessful, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
else
    echo "doing a full build"
    do_incremental=0
    do_full_cleanup=0
fi

if test "x$do_incremental" = "x1" && test -f dev/cleaned; then
    echo "this is an incremental build, but the last build got cleaned, doing nothing"
    exit 0
fi

rm -f dev/successful
rm -f dev/doc-successful
rm -f dev/cleaned
rm -f docgen.txt
rm -rf api

if test "x$do_incremental" = "x0"; then
    if test "x$do_full_cleanup" = "x1"; then
        rm -rf dev
    elif test -d dev; then
        rm -rf dev/install
        find dev -type d -name build -exec rm -rf {} \; -prune
        rm -rf dev/.gems dev/autoproj
    fi
fi

# Always delete autoproj's configuration directory so that we always start fresh
# Otherwise, it would not get updated
rm -rf dev/autoproj dev/.remotes

export GEM_HOME="$PWD/dev/.gems"

# Install yard early, some C++ packages with Ruby bindings will pick it up and
# use it to generate the Ruby binding documentation
if test "x$DOCGEN" = "xtrue"; then
    $GEM install rdoc yard --no-rdoc --no-ri
fi

rock_ci_setupdev

#additional build flags
if ! test -z "$PARALLEL"; then
    AUTOPROJ_OPTIONS="$AUTOPROJ_OPTIONS -p$PARALLEL"
fi
if test "$KEEP_GOING" = "true" ; then
    AUTOPROJ_OPTIONS="$AUTOPROJ_OPTIONS -k"
fi

echo "Finished preparing, starting build at `date` with $RUBY"

# We can finally copy the requested config file and build
rock_ci_autoproj $AUTOPROJ_OPTIONS update
rock_ci_autoproj $AUTOPROJ_OPTIONS build
touch successful

# Delete the stats file if we did not just do a full build
#
# Otherwise, generate the consolidated stats file
if test "x$do_incremental" = "x1"; then
    rm -f dev/install/log/stats.log
else
    "$ROCK_CI_DIR/rock-ci-process-stats" dev/install/log/stats.log \
        > dev/install/log/consolidated-stats.log
fi

if test "x$DOCGEN" = "xtrue"; then
    echo "Starting documentation generation at `date`"
    ( cd dev
      rock-ci-api "$PWD/api" ) 2>&1 | tee docgen.txt
    echo "copying API documentation to $api_dir"
    rsync -a --delete dev/install/doc/ "$api_dir/"
    echo "Finished documentation generation at `date`"
    touch dev/doc-successful
fi

# Save the logs AFTER documentation generation, so that they include docgen logs
# as well
mkdir -p logs
cp -r dev/install/log logs/`date +%F-%H%M%S`

echo "Done at `date`"

